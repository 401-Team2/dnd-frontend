{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport api from \"../api/Api\";\nimport CharacterCard from \"../components/CharacterCard\";\nimport bgImg from \"../../assets/bgImg.jpeg\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar LoadGameScreen = function LoadGameScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    characters = _useState2[0],\n    setCharacters = _useState2[1];\n  useEffect(function () {\n    fetchCharacters();\n  }, []);\n  var fetchCharacters = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        var charactersData = yield api.fetchCharacters();\n        setCharacters([mockCharacter].concat(_toConsumableArray(charactersData)));\n      } catch (error) {\n        console.error('Error fetching characters:', error);\n      }\n    });\n    return function fetchCharacters() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var handleCharacterSelect = function handleCharacterSelect(character) {\n    navigation.navigate('QuestForge', {\n      character: character\n    });\n  };\n  return _jsxs(ImageBackground, {\n    source: bgImg,\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n      opacity: 0.9\n    },\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"Load Game\"\n    }), _jsx(FlatList, {\n      style: styles.list,\n      data: characters,\n      keyExtractor: function keyExtractor(item) {\n        return item.id.toString();\n      },\n      renderItem: function renderItem(_ref3) {\n        var item = _ref3.item;\n        return _jsx(CharacterCard, {\n          style: styles.characterCard,\n          character: item,\n          onSelect: function onSelect() {\n            return handleCharacterSelect(item);\n          }\n        });\n      }\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  title: {\n    fontSize: 24,\n    marginTop: 20,\n    marginBottom: 10,\n    color: 'gold'\n  },\n  list: {\n    flex: 1,\n    width: '100%',\n    marginRight: 10\n  },\n  characterCard: {\n    alignItems: 'left',\n    backgroundColor: '#000'\n  }\n});\nexport default LoadGameScreen;","map":{"version":3,"names":["React","useState","useEffect","View","Text","ImageBackground","FlatList","StyleSheet","api","CharacterCard","bgImg","jsx","_jsx","jsxs","_jsxs","LoadGameScreen","_ref","navigation","_useState","_useState2","_slicedToArray","characters","setCharacters","fetchCharacters","_ref2","_asyncToGenerator","charactersData","mockCharacter","concat","_toConsumableArray","error","console","apply","arguments","handleCharacterSelect","character","navigate","source","style","flex","justifyContent","alignItems","opacity","children","styles","title","list","data","keyExtractor","item","id","toString","renderItem","_ref3","characterCard","onSelect","create","fontSize","marginTop","marginBottom","color","width","marginRight","backgroundColor"],"sources":["/Users/josh/401/labs/401-final-frontend/quest-forge-2.0-frontend/src/screens/LoadGameScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  ImageBackground,\n  FlatList,\n  StyleSheet,\n} from 'react-native';\nimport api from '../api/Api';\nimport CharacterCard from '../components/CharacterCard';\nimport bgImg from '../../assets/bgImg.jpeg';\n\nconst LoadGameScreen = ({ navigation }) => {\n  // Initial mock character for demonstration\n  // const mockCharacter = {\n  //   id: 1,\n  //   name: 'Aragorn',\n  //   race: 'Human',\n  //   class: 'Ranger',\n  //   age: 87,\n  // };\n\n  const [characters, setCharacters] = useState([]);\n\n  useEffect(() => {\n    fetchCharacters();\n  }, []);\n\n  const fetchCharacters = async () => {\n    try {\n      // Fetch characters from the API\n      const charactersData = await api.fetchCharacters();\n      // Combine API data with the mock character\n      setCharacters([mockCharacter, ...charactersData]);\n    } catch (error) {\n      console.error('Error fetching characters:', error);\n    }\n  };\n\n  const handleCharacterSelect = (character) => {\n    navigation.navigate('QuestForge', { character: character });\n  };\n\n  return (\n    <ImageBackground\n      source={bgImg}\n      style={{\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center',\n        opacity: 0.9,\n      }}\n    >\n      <Text style={styles.title}>Load Game</Text>\n      <FlatList\n        style={styles.list}\n        data={characters}\n        keyExtractor={(item) => item.id.toString()}\n        renderItem={({ item }) => (\n          <CharacterCard\n            style={styles.characterCard}\n            character={item}\n            onSelect={() => handleCharacterSelect(item)}\n          />\n        )}\n      />\n    </ImageBackground>\n  );\n};\n\nconst styles = StyleSheet.create({\n  // container: {\n  //   flex: 1,\n  //   alignItems: 'center',\n  //   justifyContent: 'center',\n  //   // backgroundColor: '#000',\n  // },\n  title: {\n    fontSize: 24,\n    marginTop: 20,\n    marginBottom: 10,\n    color: 'gold',\n  },\n  list: {\n    flex: 1,\n    width: '100%',\n    // alignItems: 'left',\n    // justifyContent: 'left',\n    // backgroundColor: '#000',\n    marginRight: 10,\n  },\n  characterCard: {\n    alignItems: 'left',\n    // justifyContent: 'left',\n    backgroundColor: '#000',\n  },\n});\n\nexport default LoadGameScreen;\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,eAAA;AAAA,OAAAC,QAAA;AAAA,OAAAC,UAAA;AAQnD,OAAOC,GAAG;AACV,OAAOC,aAAa;AACpB,OAAOC,KAAK;AAAgC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAE5C,IAAMC,cAAc,GAAG,SAAjBA,cAAcA,CAAAC,IAAA,EAAuB;EAAA,IAAjBC,UAAU,GAAAD,IAAA,CAAVC,UAAU;EAUlC,IAAAC,SAAA,GAAoCjB,QAAQ,CAAC,EAAE,CAAC;IAAAkB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAzCG,UAAU,GAAAF,UAAA;IAAEG,aAAa,GAAAH,UAAA;EAEhCjB,SAAS,CAAC,YAAM;IACdqB,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMA,eAAe;IAAA,IAAAC,KAAA,GAAAC,iBAAA,CAAG,aAAY;MAClC,IAAI;QAEF,IAAMC,cAAc,SAASlB,GAAG,CAACe,eAAe,CAAC,CAAC;QAElDD,aAAa,EAAEK,aAAa,EAAAC,MAAA,CAAAC,kBAAA,CAAKH,cAAc,EAAC,CAAC;MACnD,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD;IACF,CAAC;IAAA,gBATKP,eAAeA,CAAA;MAAA,OAAAC,KAAA,CAAAQ,KAAA,OAAAC,SAAA;IAAA;EAAA,GASpB;EAED,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAIC,SAAS,EAAK;IAC3ClB,UAAU,CAACmB,QAAQ,CAAC,YAAY,EAAE;MAAED,SAAS,EAAEA;IAAU,CAAC,CAAC;EAC7D,CAAC;EAED,OACErB,KAAA,CAACT,eAAe;IACdgC,MAAM,EAAE3B,KAAM;IACd4B,KAAK,EAAE;MACLC,IAAI,EAAE,CAAC;MACPC,cAAc,EAAE,QAAQ;MACxBC,UAAU,EAAE,QAAQ;MACpBC,OAAO,EAAE;IACX,CAAE;IAAAC,QAAA,GAEF/B,IAAA,CAACR,IAAI;MAACkC,KAAK,EAAEM,MAAM,CAACC,KAAM;MAAAF,QAAA,EAAC;IAAS,CAAM,CAAC,EAC3C/B,IAAA,CAACN,QAAQ;MACPgC,KAAK,EAAEM,MAAM,CAACE,IAAK;MACnBC,IAAI,EAAE1B,UAAW;MACjB2B,YAAY,EAAE,SAAAA,aAACC,IAAI;QAAA,OAAKA,IAAI,CAACC,EAAE,CAACC,QAAQ,CAAC,CAAC;MAAA,CAAC;MAC3CC,UAAU,EAAE,SAAAA,WAAAC,KAAA;QAAA,IAAGJ,IAAI,GAAAI,KAAA,CAAJJ,IAAI;QAAA,OACjBrC,IAAA,CAACH,aAAa;UACZ6B,KAAK,EAAEM,MAAM,CAACU,aAAc;UAC5BnB,SAAS,EAAEc,IAAK;UAChBM,QAAQ,EAAE,SAAAA,SAAA;YAAA,OAAMrB,qBAAqB,CAACe,IAAI,CAAC;UAAA;QAAC,CAC7C,CAAC;MAAA;IACF,CACH,CAAC;EAAA,CACa,CAAC;AAEtB,CAAC;AAED,IAAML,MAAM,GAAGrC,UAAU,CAACiD,MAAM,CAAC;EAO/BX,KAAK,EAAE;IACLY,QAAQ,EAAE,EAAE;IACZC,SAAS,EAAE,EAAE;IACbC,YAAY,EAAE,EAAE;IAChBC,KAAK,EAAE;EACT,CAAC;EACDd,IAAI,EAAE;IACJP,IAAI,EAAE,CAAC;IACPsB,KAAK,EAAE,MAAM;IAIbC,WAAW,EAAE;EACf,CAAC;EACDR,aAAa,EAAE;IACbb,UAAU,EAAE,MAAM;IAElBsB,eAAe,EAAE;EACnB;AACF,CAAC,CAAC;AAEF,eAAehD,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}