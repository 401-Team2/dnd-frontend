{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { Radio } from \"react-native-web/dist/index\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport api from \"../api/Api\";\nimport axios from 'axios';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar SERVER_URL = 'https://tjmp838d98.execute-api.us-west-2.amazonaws.com/WorkingPOST';\nvar QuestForgeScreen = function QuestForgeScreen(_ref) {\n  var route = _ref.route;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    data = _useState2[0],\n    setData = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    userChoice = _useState4[0],\n    setUserChoice = _useState4[1];\n  useEffect(function () {\n    var _route$params, _route$params2;\n    if ((_route$params = route.params) != null && _route$params.newGame) {\n      fetchDataAndDisplay();\n    } else if ((_route$params2 = route.params) != null && _route$params2.character) {\n      var character = route.params.character;\n      continueGame(character);\n    }\n  }, [route.params]);\n  var fetchDataAndDisplay = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        var _data = yield api.startNewGame();\n        setData(_data);\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    });\n    return function fetchDataAndDisplay() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var continueGame = function () {\n    var _ref3 = _asyncToGenerator(function* (character) {\n      try {\n        var _data2 = yield api.loadGame(character.id);\n        setData(_data2);\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    });\n    return function continueGame(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var handleUserChoice = function () {\n    var _ref4 = _asyncToGenerator(function* () {\n      try {\n        var updatedData = yield api.continueGame(data, userChoice);\n        setData(updatedData);\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    });\n    return function handleUserChoice() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsx(Text, {\n      style: styles.title,\n      children: \"Quest Forge Adventure\"\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold'\n  }\n});\nexport default QuestForgeScreen;","map":{"version":3,"names":["React","useState","useEffect","View","Text","Button","Radio","StyleSheet","api","axios","jsx","_jsx","SERVER_URL","QuestForgeScreen","_ref","route","_useState","_useState2","_slicedToArray","data","setData","_useState3","_useState4","userChoice","setUserChoice","_route$params","_route$params2","params","newGame","fetchDataAndDisplay","character","continueGame","_ref2","_asyncToGenerator","startNewGame","error","console","apply","arguments","_ref3","loadGame","id","_x","handleUserChoice","_ref4","updatedData","style","styles","container","children","title","create","flex","alignItems","justifyContent","padding","fontSize","fontWeight"],"sources":["/Users/ryomazen/Documents/codefellows/projects/quest-forge-2.0-frontend/src/screens/QuestForgeScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { View, Text, Button, Radio, StyleSheet } from 'react-native';\nimport api from '../api/Api';\nimport axios from 'axios';\n\nconst SERVER_URL = 'https://tjmp838d98.execute-api.us-west-2.amazonaws.com/WorkingPOST';\n\nconst QuestForgeScreen = ({ route }) => {\n  const [data, setData] = useState(null);\n  const [userChoice, setUserChoice] = useState(null);\n\n  useEffect(() => {\n    if (route.params?.newGame) {\n      // Initialize new game logic\n      fetchDataAndDisplay();\n    } else if (route.params?.character) {\n      // Load the game with the selected character\n      const character = route.params.character;\n      continueGame(character);\n    }\n  }, [route.params]);\n\n  const fetchDataAndDisplay = async () => {\n    try {\n      const data = await api.startNewGame();\n      setData(data);\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  \n  const continueGame = async (character) => {\n    try {\n      const data = await api.loadGame(character.id);\n      setData(data);\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  \n  const handleUserChoice = async () => {\n    try {\n      const updatedData = await api.continueGame(data, userChoice);\n      setData(updatedData);\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n\n  // Add render logic and UI components\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Quest Forge Adventure</Text>\n      {/* Implement the game UI here */}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n  },\n  // Add more styles as needed\n});\n\nexport default QuestForgeScreen;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}